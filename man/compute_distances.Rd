% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/brsmatching.R
\name{compute_distances}
\alias{compute_distances}
\title{Compute distance on valid matches in Risk Set Matching.}
\usage{
compute_distances(
  df,
  id = "id",
  time = "time",
  trt_time = "trt_time",
  covariates = NULL
)
}
\arguments{
\item{df}{data frame containing columns matching the \code{id, time, trt_time} arguments, and covariates.
This data frame is expected to be in tidy, long format, so that the \code{id}, \code{trt_time}, and
baseline  variables may be repeated for different values of \code{time}.  Data frame should be unique
at \code{id} and \code{time}.}

\item{id}{optional parameter to specify the name of the id column in \code{df}.}

\item{time}{optional parameter to specify the name of the time column in \code{df}.}

\item{trt_time}{optional parameter to specify the name of the treatment time column in \code{df}.}

\item{covariates}{optional parameter to specify the names of covariates to be used. If \code{NULL}, will
default to all columns except those named by \code{id, time, trt_time}.}
}
\value{
a data frame with valid risk set matching pairs and their corresponding distance.  This data frame
will have four columns.  \code{trt_id} refers to the treated id, \code{all_id} refers to the id that is
a possible control, \code{trt_time} refers to the treatment time of \code{trt_id}, and \code{dist} refers to
the Mahalanobis distance
}
\description{
The \code{compute_distances} function takes in longitudinal data and
computes the Mahalanobis distance between eligible edges according to the
procedure of risk set matching. In risk set matching, each individual that
is treated at time t can be matched to someone who hasn't been treated yet
as of time t.  The Mahalanobis distance is computed for each treated
id against possible matches based on baseline and timevarying covariates at
time t. See Li et al. (2001) "Balanced Risk Set Matching" for additional
details.
}
\examples{
df <- data.frame(
  hhidpn = rep(1:3, each = 3),
  wave = rep(1:3, 3),
  treatment_time = rep(c(2,3,NA), each = 3),
  X1 = c(2,2,2,3,3,3,9,9,9),
  X2 = rep(c("a","a","b"), each = 3),
  X3 = c(9,4,5,6,7,2,3,4,8),
  X4 = c(8,9,4,5,6,7,2,3,4)
)

compute_distances(df, "hhidpn", "wave", "treatment_time")

}
